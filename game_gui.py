# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pickle
from PyQt5.QtWidgets import QMessageBox


def show_popup():
    msg = QMessageBox()
    
    str_msg = ""
    str_msg +="\nTahta Üzerinde Kelimelik Oyununa Hoş Geldiniz!"
    str_msg +="\n- Kelimeleriniz Türkçe olmalıdır."
    str_msg +="\n- İlk tur hariç karşı tarafın yazdığı kelimenin bittiği yerden itibaren, tahtanın boş olan kısmına\n'aşağı', 'yukarı', 'sağ', 'sol' yönlerinde kelimeler yazabilirsiniz."
    str_msg +="\n- Başarısız deneme hakkınız 5'tir, bunun üzerinde deneme yaparsanız oyun sonlanır."
    str_msg +="\n- Oyundan çıkmak için sıra sizdeyken '.' karakterini girmeniz gerekmektedir."
    
    msg.setWindowTitle("Kurallar :")
    msg.setText(str_msg)
    msg.setIcon(QMessageBox.Information)
    msg.setStandardButtons(QMessageBox.Ok)
    
    x = msg.exec_()


class tree:
    def __init__(self, root_word, score = 0, children = None):
        self.root_word = root_word
        self.score = score
        self.children = children


def scoring(word):
    scores = {'a': 1,'b':3,'c':4,'ç':4,'d':3,
              'e':1,'f':7,'g':5,'ğ':8,'h':5,
              'ı':2,'i':1,'j':10,'k':1,'l':1,
              'm':2,'n':1,'o':2,'ö':7,'p':5,
              'r':1,'s':2,'ş':4,'t':1,'u':2,
              'ü':3,'v':7,'y':3,'z':4}

    score = 0
    for i in word:
        score += scores[i]
    return score

def read_dict():
    a_file = open("turkish_dict.pkl", "rb")
    words_dict = pickle.load(a_file)
    return words_dict
    
    
def create_tree(root_word):
    
    root = tree(root_word)
    children = []
    
    letter_for_dict = 'x'
    
    if root_word[-1] == 'ğ':
        letter_for_dict = 'g'
    else:
        letter_for_dict = root_word[-1]   
        
    for word in words_dict[letter_for_dict]:
        tmp_node = tree(word)
        
        letter_for_dict_2 = 'x'
        if word[-1] == 'ğ':
            letter_for_dict_2 = 'g'
        else:
            letter_for_dict_2 = word[-1]
            
        maximum = 0
        for w in words_dict[letter_for_dict_2]:
            score_w = scoring(w)
            if score_w > maximum:
                maximum = score_w
        tmp_node.score = maximum 
    
        children.append(tmp_node)
        
    root.children = children
    return root


def choose_best_word(root, forbidden_words, max_len):
    min_score = root.children[0].score
    min_index = 0
    max_word = 'a'

    for i, child_node in enumerate(root.children):
        if child_node.score <= min_score:
            min_score = child_node.score
            min_index = i
            
            if (scoring(child_node.root_word) > scoring(max_word)) and (child_node.root_word not in forbidden_words) and len(child_node.root_word) <= max_len:
                max_word = child_node.root_word
    return max_word
    
def make_board(size):
    return [[" " for i in range(size)] for j in range(size)]
   
def print_board(board,user_score, agent_score, ui):
    
    print("Sizin Skorunuz : ", user_score)
    print("Ajanın Skoru   : ", agent_score)
    ui.scoreLabel.setText(f"Sizin Skorunuz : {user_score}    Ajanin Skoru : {agent_score}")
    
    for j,row in enumerate(board):
        print(j,end="\t")
        for i,square in enumerate(row):
            if square == "☐":
                ui.tableWidget.setItem(j,i, QtWidgets.QTableWidgetItem(square))
                print(square, end = " ")
                row[i] = " "
            elif square != " ":
                ui.tableWidget.setItem(j,i,QtWidgets.QTableWidgetItem(square))
                print(square, end= " "),
            else:
                ui.tableWidget.setItem(j,i,QtWidgets.QTableWidgetItem(" "))
                print('.', end= " "),
        print("")
    print("-"*50)

def put_board(board, board_size, word, start_x, start_y, direction, ui):
    
    if start_x > board_size-1 or start_y > board_size-1:
        ui.infoLabel.setText("Tahtanın dışına kelime yazamazsınız!")
        return False,0,0
    
    
    len_word = len(word)
    if direction == 'right':
        if (start_y + len_word) > board_size:
            ui.infoLabel.setText("Kelime tahtaya sığmadı!")
            return False,0,0
        
        for i in range(len_word):
            if board[start_x][start_y + i] != ' ':
                ui.infoLabel.setText("Kelime diğer kelimelerden biriyle çakıştı!")
                return False,0,0
        for i in range(len_word):
            board[start_x][start_y + i] = word[i]
            
        return True, start_x, start_y+len_word-1
    
    if direction == 'left':
        if (start_y - len_word) < -1:
            ui.infoLabel.setText("Kelime tahtaya sığmadı!")
            return False,0,0
        
        for i in range(len_word):
            if board[start_x][start_y - i] != ' ':
                ui.infoLabel.setText("Kelime diğer kelimelerden biriyle çakıştı!")
                return False,0,0 
        for i in range(len_word):
            board[start_x][start_y - i] = word[i]
        
        return True, start_x, start_y-len_word+1
    
    if direction == 'up':
        if (start_x - len_word) < -1:
            ui.infoLabel.setText("Kelime tahtaya sığmadı!")
            return False,0,0
        
        for i in range(len_word):
            if board[start_x - i][start_y] != ' ':
                ui.infoLabel.setText("Kelime diğer kelimelerden biriyle çakıştı!")
                return False,0,0 
        for i in range(len_word):
            board[start_x - i][start_y] = word[i]
        
        return True, start_x-len_word+1, start_y 
    
    if direction == 'down':
        if (start_x + len_word) > board_size:
            ui.infoLabel.setText("Kelime tahtaya sığmadı!")
            return False,0,0
        
        for i in range(len_word):
            if board[start_x + i][start_y] != ' ':
                ui.infoLabel.setText("Kelime diğer kelimelerden biriyle çakıştı!")
                return False,0,0 
        for i in range(len_word):
            board[start_x + i][start_y] = word[i]
        
        return True, start_x+len_word-1, start_y    


def max_space(board, board_size, x,y):
    max_space = 0
    direction = 'x'
    
    each = []
    
    count = 1
    for i in range(x+1,board_size):
        if board[i][y] == ' ':
            count += 1
        else:
            break
    #print("down : ", count)
    each.append(count)
    if count > max_space:
        max_space = count
        direction = 'down'
    
    count = 1
    ctrl = 0
    for i in range(x-1,0,-1):
        
        if board[i][y] == ' ':
            count += 1
        else:
            ctrl = 1
            break
    if ctrl == 0:
        count += 1
            
    #print("up : ", count)       
    each.append(count)
    if count > max_space:
        max_space = count
        direction = 'up'
    
    count = 1
    for i in range(y+1,board_size):
        if board[x][i] == ' ':
            count += 1
        else:
            break
    #print("right : ", count)        
    each.append(count)
    if count > max_space:
        max_space = count
        direction = 'right'
    
    count = 1
    ctrl = 0
    for i in range(y-1,0,-1):
        if board[x][i] == ' ':
            count += 1
        else:
            ctrl = 1
            break
    if ctrl == 0:
        count += 1
        
    #print("left : ", count)
    each.append(count)
    if count > max_space:
        max_space = count
        direction = 'left'
        
    return direction, max_space, each


import random
#from IPython.display import clear_output



def game_with_board(board_size, words_dict, ui):
    
    #clear_output(wait=True)
    board = make_board(board_size)
    initial_x = random.randint(0,board_size-1)
    initial_y = random.randint(0,board_size-1)
    board[initial_x][initial_y] = '☐'
    
    user_score = 0
    agent_score = 0
    print_board(board, user_score, agent_score,ui)
    
    toggle = 1 # 0 - user | 1 - agent
    
    forbidden_words = []
    user_trying = 1
    
    
    user_word = input('İlk kelimeyi giriniz: ')
    '''
    with concurrent.futures.ThreadPoolExecutor() as executor:
        future = executor.submit(wait_user, ui)
        future.result()
    print("aaaaaaaaaaaaa")
    '''
    #import time
    #time.sleep(10)
    '''
    while '\n' not in ui.wordInput.toPlainText():
        user_word = 'x'
    
    user_word = ui.wordInput.toPlainText()[:-1]
    '''
    '''
    print("AAAA", ui.okButton.clicked)
    while ui.okButton.clicked == False:
        print("AAAA", ui.okButton.clicked)
        
    user_word = ui.wordInput.toPlainText()
    '''
    if user_word == '.':
        print("Çıkış yapılıyor...")
        return 
   
    while (user_word[0] not in words_dict.keys()) or (user_word not in words_dict[user_word[0]]):
        if (user_word[0] not in words_dict.keys()):
            print("Türkçe karakterler kullanınız!")
            user_word = input('İlk kelimeyi giriniz: ')
        elif (user_word not in words_dict[user_word[0]]):
            print("Sözlükte bulunan bir kelime giriniz...")
            user_word = input('İlk kelimeyi giriniz: ')
        if user_word == '.':
            print("Çıkış yapılıyor...")
            return
        user_trying += 1
        if user_trying >= 5:
            print('Deneme Hakkınız ve Oyun Bitti!')
            if agent_score>=user_score:
                print("Ajan Kazandı!")
            else:
                print("Siz Kazandınız!")
            return

    ctrl_dir = False
    while ctrl_dir == False:
        direction  = input("Yön seçiniz : ")
        if direction == "sağ":
            ctrl_dir,last_x,last_y = put_board(board,board_size,user_word, initial_x, initial_y, 'right',ui=ui)
        elif direction == "sol":
            ctrl_dir,last_x,last_y = put_board(board,board_size,user_word, initial_x, initial_y, 'left',ui=ui)
        elif direction == "yukarı":
            ctrl_dir,last_x,last_y = put_board(board,board_size,user_word, initial_x, initial_y, 'up',ui=ui)
        elif direction == "aşağı":
            ctrl_dir,last_x,last_y = put_board(board,board_size,user_word, initial_x, initial_y, 'down',ui=ui)
        else:
            print("Yön olarak aşağı, yukarı, sağ veya sol giriniz!")
    
    user_score = scoring(user_word)
    forbidden_words.append(user_word)
    agent_score = 0
    #clear_output(wait=True)
    print_board(board, user_score, agent_score,ui)
    
    while(True):
        ui.infoLabel.setText(f"")
        ui.infoLabel.repaint()
        if toggle == 1:
            print("Ajan düşünüyor...")
            root = create_tree(user_word)
            #print(last_x,last_y)
            direction, max_len, each = max_space(board,board_size, last_x, last_y)
            agent_word = choose_best_word(root, forbidden_words, max_len)
            print("Ajanın Kelimesi : ", agent_word)
            
            if direction == 'right':
                _,last_x,last_y = put_board(board,board_size,agent_word[1:], start_x=last_x, start_y=last_y+1,direction=direction,ui=ui)
            elif direction == 'left':
                _,last_x,last_y = put_board(board,board_size,agent_word[1:], start_x=last_x, start_y=last_y-1,direction=direction,ui=ui)
            elif direction == 'up':
                _,last_x,last_y = put_board(board,board_size,agent_word[1:], start_x=last_x-1, start_y=last_y,direction=direction,ui=ui)
            elif direction == 'down':
                _,last_x,last_y = put_board(board,board_size,agent_word[1:], start_x=last_x+1, start_y=last_y,direction=direction,ui=ui)
            
            agent_score += scoring(agent_word)
            toggle = 0
            #clear_output(wait=True)
            print_board(board,user_score,agent_score,ui)
            
            forbidden_words.append(agent_word)
            
            if len([i for i in each if i < 2]) == 4:
                print('Oyun Bitti!')
                if agent_score>=user_score:
                    print("Ajan Kazandı!")
                else:
                    print("Siz Kazandınız!")
                return
        
        _, max_len, _= max_space(board,board_size, last_x, last_y)
        user_trying = 1
        if toggle == 0:            
            user_word = input('Kelimeniz: ')
            if user_word == '.':
                print("Çıkış yapılıyor...")
                return
            #print(user_word not in words_dict[user_word[0]])
            while (user_word[0] not in words_dict.keys()) or (user_word not in words_dict[user_word[0]]) or (user_word[0] != agent_word[-1]) or (user_word in forbidden_words) or (len(user_word) > max_len):
                if (user_word[0] not in words_dict.keys()):
                    print("Türkçe karakterler kullanınız!")
                elif (user_word[0] != agent_word[-1]):
                    print("Son kelimenin son harfiyle başlayan bir kelime giriniz!")
                elif (user_word not in words_dict[user_word[0]]):
                    print("Sözlükte bulunan bir kelime giriniz!")
                elif (user_word in forbidden_words):
                    print("Daha önce kullanılmayan bir kelime giriniz!")
                elif (len(user_word) > max_len):
                    print("Bu kelime hiçbir yönde yazılamaz!")
                user_trying += 1
                if user_trying >= 5:
                    print('Deneme Hakkınız ve Oyun Bitti!')
                    if agent_score>=user_score:
                        print("Ajan Kazandı!")
                    else:
                        print("Siz Kazandınız!")
                    return
                user_word = input('Kelimeniz: ')
                if user_word == '.':
                    print("Çıkış yapılıyor...")
                    return
            #print("Last X = ",last_x, "Last Y = ", last_y)
            ctrl_dir = False
            while ctrl_dir == False:
                direction  = input("Yön seçiniz : ")
                if direction == "sağ":
                    ctrl_dir,last_x_tmp,last_y_tmp = put_board(board,board_size,user_word[1:], last_x, last_y+1, 'right',ui=ui)
                elif direction == "sol":
                    ctrl_dir,last_x_tmp,last_y_tmp = put_board(board,board_size,user_word[1:], last_x, last_y-1, 'left',ui=ui)
                elif direction == "yukarı":
                    ctrl_dir,last_x_tmp,last_y_tmp = put_board(board,board_size,user_word[1:], last_x-1, last_y, 'up',ui=ui)
                elif direction == "aşağı":
                    ctrl_dir,last_x_tmp,last_y_tmp = put_board(board,board_size,user_word[1:], last_x+1, last_y, 'down',ui=ui)
                else:
                    print("Yön olarak aşağı, yukarı, sağ veya sol giriniz!")

            forbidden_words.append(user_word)
            user_score += scoring(user_word)
            toggle = 1
            
            #clear_output(wait=True)
            print_board(board, user_score, agent_score,ui)
            last_x, last_y = last_x_tmp, last_y_tmp
            if len([i for i in each if i < 2]) == 4:
                print('Oyun Bitti!')
                if agent_score>user_score:
                    print("Ajan Kazandı!")
                else:
                    print("Siz Kazandınız!")
                return



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(834, 891)
        MainWindow.setFixedSize(834,891)
        MainWindow.setStyleSheet("background-color: rgb(152, 107, 65);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.okButton = QtWidgets.QPushButton(self.centralwidget)
        self.okButton.setGeometry(QtCore.QRect(450, 690, 50, 30))
        self.okButton.setStyleSheet("font: 36pt \"8514oem\";\n"
"background-color: rgb(37, 114, 115);")
        self.okButton.setObjectName("okButton")
        
        
        self.upButton = QtWidgets.QPushButton(self.centralwidget)
        self.upButton.setGeometry(QtCore.QRect(650, 680, 61, 51))
        self.upButton.setStyleSheet("font: 36pt \"8514oem\";\n"
"background-color: rgb(37, 114, 115);")
        self.upButton.setObjectName("upButton")
        self.rightButton = QtWidgets.QPushButton(self.centralwidget)
        self.rightButton.setGeometry(QtCore.QRect(720, 740, 61, 51))
        self.rightButton.setStyleSheet("font: 36pt \"8514oem\";\n"
"border-color: rgb(0, 0, 0);\n"
"background-color: rgb(37, 114, 115);")
        self.rightButton.setObjectName("rightButton")
        self.leftButton = QtWidgets.QPushButton(self.centralwidget)
        self.leftButton.setGeometry(QtCore.QRect(580, 740, 61, 51))
        self.leftButton.setStyleSheet("font: 36pt \"8514oem\";\n"
"background-color: rgb(37, 114, 115);")
        self.leftButton.setObjectName("leftButton")
        self.downButton = QtWidgets.QPushButton(self.centralwidget)
        self.downButton.setGeometry(QtCore.QRect(650, 800, 61, 51))
        self.downButton.setStyleSheet("font: 36pt \"8514oem\";\n"
"background-color: rgb(37, 114, 115);")
        self.downButton.setObjectName("downButton")
        self.not_used = QtWidgets.QPushButton(self.centralwidget)
        self.not_used.setGeometry(QtCore.QRect(660, 750, 41, 31))
        self.not_used.setStyleSheet("background-color: rgb(37, 114, 115);")
        self.not_used.setText("")
        self.not_used.setObjectName("not_used")
        self.wordInput = QtWidgets.QTextEdit(self.centralwidget)
        self.wordInput.setGeometry(QtCore.QRect(170, 690, 271, 31))
        self.wordInput.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Times New Roman\";")
        self.wordInput.setObjectName("wordInput")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 690, 131, 41))
        self.label.setStyleSheet("font: 14pt \"8514oem\";")
        self.label.setObjectName("label")
        self.infoLabel = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel.setGeometry(QtCore.QRect(20, 740, 411, 41))
        self.infoLabel.setStyleSheet("font: 10pt \"Times New Roman\";")
        self.infoLabel.setText("")
        self.infoLabel.setObjectName("infoLabel")
        self.scoreLabel = QtWidgets.QLabel(self.centralwidget)
        self.scoreLabel.setGeometry(QtCore.QRect(20, 790, 511, 61))
        self.scoreLabel.setStyleSheet("font: 12pt \"8514oem\";")
        self.scoreLabel.setObjectName("scoreLabel")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 10, 821, 651))
        self.tableWidget.setStyleSheet("font: 12pt \"Snap ITC\";\n"
"background-color: rgb(215, 186, 137);\n"
"gridline-color: rgb(0, 0, 0);")

        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(20)
        self.tableWidget.setRowCount(20)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setUnderline(False)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(19, item)
        
        for i in range(20):
            self.tableWidget.setColumnWidth(i, 39);
        
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 834, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Kelime Oyunu"))
        self.okButton.setText(_translate("MainWindow", "OK"))
        self.upButton.setText(_translate("MainWindow", "↑"))
        self.rightButton.setText(_translate("MainWindow", "→"))
        self.leftButton.setText(_translate("MainWindow", "←"))
        self.downButton.setText(_translate("MainWindow", "↓"))
        self.wordInput.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:12pt; font-weight:72; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Kelimeniz : "))
        self.scoreLabel.setText(_translate("MainWindow", "Agent\'s Score: 100             Your Score : 150"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "0"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "2"))
        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "3"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "4"))
        item = self.tableWidget.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "5"))
        item = self.tableWidget.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "6"))
        item = self.tableWidget.verticalHeaderItem(7)
        item.setText(_translate("MainWindow", "7"))
        item = self.tableWidget.verticalHeaderItem(8)
        item.setText(_translate("MainWindow", "8"))
        item = self.tableWidget.verticalHeaderItem(9)
        item.setText(_translate("MainWindow", "9"))
        item = self.tableWidget.verticalHeaderItem(10)
        item.setText(_translate("MainWindow", "10"))
        item = self.tableWidget.verticalHeaderItem(11)
        item.setText(_translate("MainWindow", "11"))
        item = self.tableWidget.verticalHeaderItem(12)
        item.setText(_translate("MainWindow", "12"))
        item = self.tableWidget.verticalHeaderItem(13)
        item.setText(_translate("MainWindow", "13"))
        item = self.tableWidget.verticalHeaderItem(14)
        item.setText(_translate("MainWindow", "14"))
        item = self.tableWidget.verticalHeaderItem(15)
        item.setText(_translate("MainWindow", "15"))
        item = self.tableWidget.verticalHeaderItem(16)
        item.setText(_translate("MainWindow", "16"))
        item = self.tableWidget.verticalHeaderItem(17)
        item.setText(_translate("MainWindow", "17"))
        item = self.tableWidget.verticalHeaderItem(18)
        item.setText(_translate("MainWindow", "18"))
        item = self.tableWidget.verticalHeaderItem(19)
        item.setText(_translate("MainWindow", "19"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "0"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "2"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "3"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "4"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "5"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "6"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "7"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "8"))
        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "9"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "10"))
        item = self.tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "11"))
        item = self.tableWidget.horizontalHeaderItem(12)
        item.setText(_translate("MainWindow", "12"))
        item = self.tableWidget.horizontalHeaderItem(13)
        item.setText(_translate("MainWindow", "13"))
        item = self.tableWidget.horizontalHeaderItem(14)
        item.setText(_translate("MainWindow", "14"))
        item = self.tableWidget.horizontalHeaderItem(15)
        item.setText(_translate("MainWindow", "15"))
        item = self.tableWidget.horizontalHeaderItem(16)
        item.setText(_translate("MainWindow", "16"))
        item = self.tableWidget.horizontalHeaderItem(17)
        item.setText(_translate("MainWindow", "17"))
        item = self.tableWidget.horizontalHeaderItem(18)
        item.setText(_translate("MainWindow", "18"))
        item = self.tableWidget.horizontalHeaderItem(19)
        item.setText(_translate("MainWindow", "19"))

import concurrent.futures
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    
    #ui.infoLabel.setText("asdasdsdf")
    
    words_dict = read_dict()
    MainWindow.show()
    show_popup()
    '''
    words_dict = read_dict()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        future = executor.submit(game_with_board, 20, words_dict, ui)
        future.result()
    '''
    game_with_board(20, words_dict, ui)
    
    sys.exit(app.exec_())
